int count = 0, n;
int mark[1001][1001], map[1001][1001];

void ini_m(int n);
void dfs(int i, int j);

int main() {
	int m, i, j;
	char tmp;
	clock_t start_t, end_t;
	scanf("%d %d", &n, &m);
	getchar();
	start_t = clock();
	for (int p = 1; p <= n; p++) {
		for (int k = 1; k <= n; k++) {
			scanf("%c", &tmp);
			map[p][k] = tmp - '0';
		}
		getchar();
	}
	ini_m(n);
	for (int k = 0; k <= m - 1; k++) {
		scanf("%d %d", &i, &j);
		if (mark[i][j] == 0) {
			count = 0;
			ini_m(n);
			dfs(i, j);
		}
		printf("%d\n", count);
	}
	end_t = clock();
	printf("time= %lf\n", (double)(end_t - start_t) / CLOCKS_PER_SEC);
	system("pause");
	return 0;
}

void ini_m(int n) {
	for (int i = 1; i <= n; i++)
		for (int j = 0; j <= n; j++)
			mark[i][j] = 0;
}

void dfs(int i, int j) {
	count++;
	mark[i][j] = 1;
	int flag = map[i][j];
	if (flag)
		flag = 0;
	else
		flag = 1;
	if (i - 1 >= 1 && map[i - 1][j] == flag && mark[i - 1][j] == 0)
		dfs(i - 1, j);
	if (i + 1 <= n && map[i + 1][j] == flag && mark[i + 1][j] == 0)
		dfs(i + 1, j);
	if (j - 1 >= 1 && map[i][j - 1] == flag && mark[i][j - 1] == 0)
		dfs(i, j - 1);
	if (j + 1 <= n && map[i][j + 1] == flag && mark[i][j + 1] == 0)
		dfs(i, j + 1);
}